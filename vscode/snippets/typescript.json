// {
// 	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
// 	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// 	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
// 	// same ids are connected.
// 	// Example:
// 	// "Print to console": {
// 	// 	"prefix": "log",
// 	// 	"body": [
// 	// 		"console.log('$1');",
// 	// 		"$2"
// 	// 	],
// 	// 	"description": "Log output to console"
// 	// }
// }
{
	"sass type defination": {
		"prefix": "sass:type-def",
		"body": [
			"declare module '*.scss' {",
			"\tconst content: {",
			"\t\t[className: string]: string};",
			"\texport default content;\r}"
	]
},
"c-name": {
	"prefix": "snip-name",
	"body": [
		"/**@d1vij */",
		"$1"
	],
},
"Custom Error Class": {
	"prefix": "customError",
	"body": [
		"export class ${1:ErrorName} extends Error {",
		"    constructor(message: string) {",
		"        super(`${3:${1}}: ${ message }`);",
		"        this.name = '${1}';",
		"        Object.setPrototypeOf(this, new.target.prototype);",
		"    }",
		"}"
	],
	"description": "Creates a custom error class extending Error"
},

"express controller": {
	"prefix": ":express:controller",
	"body": [
		"async function ${1:name}(request:Request, response:Response){$2}"
	]
},
"express routes logger middleware": {
	"prefix": ":express:middleware:logger",
	"body": [
		"import chalk from \"chalk\";",
		"import { Request, Response, NextFunction } from \"express\";",
		"",
		"export async function logger(request: Request, response: Response, next: NextFunction) {",
		"  switch (request.method) {",
		"    case \"GET\": {",
		"      console.log(`[*] ${chalk.green(\"GET\")} on ${request.url}`);",
		"      break;",
		"    }",
		"    case \"POST\": {",
		"      console.log(`[*] ${chalk.blue(\"POST\")} on ${request.url}`);",
		"      break;",
		"    }",
		"    case \"DELETE\": {",
		"      console.log(`[*] ${chalk.red(\"DELETE\")} on ${request.url}`);",
		"      break;",
		"    }",
		"    default: {",
		"      console.log(`[*] ${chalk.grey(request.method)} on ${request.url}`);",
		"      break;",
		"    }",
		"  }",
		"  next();",
		"}"
	]
},
}